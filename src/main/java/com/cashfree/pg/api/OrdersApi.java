/*
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cashfree.pg.api;


import com.cashfree.pg.ApiCallback;
import com.cashfree.pg.ApiClient;
import com.cashfree.pg.ApiException;
import com.cashfree.pg.ApiResponse;
import com.cashfree.pg.Configuration;
import com.cashfree.pg.Pair;
import com.cashfree.pg.model.CFAuthorizationRequest;
import com.cashfree.pg.model.CFOrder;
import com.cashfree.pg.model.CFOrderPayRequest;
import com.cashfree.pg.model.CFOrderPayResponse;
import com.cashfree.pg.model.CFOrderRequest;
import com.cashfree.pg.model.CFPaymentsEntity;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrder
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfOrderRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call createOrderCall(
            String xClientId,
            String xClientSecret,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFOrderRequest cfOrderRequest,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cfOrderRequest;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xIdempotencyReplayed != null) {
            localVarHeaderParams.put(
                    "x-idempotency-replayed",
                    localVarApiClient.parameterToString(xIdempotencyReplayed));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put(
                    "x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put(
                    "x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFOrderRequest cfOrderRequest,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling createOrder(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling"
                            + " createOrder(Async)");
        }

        return createOrderCall(
                xClientId,
                xClientSecret,
                xApiVersion,
                xIdempotencyReplayed,
                xIdempotencyKey,
                xRequestId,
                cfOrderRequest,
                _callback);
    }

    /**
     * Create Order Use this API to create orders with Cashfree from your backend and get the
     * payment link
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfOrderRequest (optional)
     * @return CFOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public CFOrder createOrder(
            String xClientId,
            String xClientSecret,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFOrderRequest cfOrderRequest)
            throws ApiException {
        ApiResponse<CFOrder> localVarResp =
                createOrderWithHttpInfo(
                        xClientId,
                        xClientSecret,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        cfOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Create Order Use this API to create orders with Cashfree from your backend and get the
     * payment link
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfOrderRequest (optional)
     * @return ApiResponse&lt;CFOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<CFOrder> createOrderWithHttpInfo(
            String xClientId,
            String xClientSecret,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFOrderRequest cfOrderRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                createOrderValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        cfOrderRequest,
                        null);
        Type localVarReturnType = new TypeToken<CFOrder>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Order (asynchronously) Use this API to create orders with Cashfree from your backend
     * and get the payment link
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfOrderRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call createOrderAsync(
            String xClientId,
            String xClientSecret,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFOrderRequest cfOrderRequest,
            final ApiCallback<CFOrder> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createOrderValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        cfOrderRequest,
                        _callback);
        Type localVarReturnType = new TypeToken<CFOrder>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrder
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call getOrderCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/orders/{order_id}"
                        .replace(
                                "{" + "order_id" + "}",
                                localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xIdempotencyReplayed != null) {
            localVarHeaderParams.put(
                    "x-idempotency-replayed",
                    localVarApiClient.parameterToString(xIdempotencyReplayed));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put(
                    "x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put(
                    "x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling getOrder(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling getOrder(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'orderId' when calling getOrder(Async)");
        }

        return getOrderCall(
                xClientId,
                xClientSecret,
                orderId,
                xApiVersion,
                xIdempotencyReplayed,
                xIdempotencyKey,
                xRequestId,
                _callback);
    }

    /**
     * Get Order Use this API to view all details of an order.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return CFOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public CFOrder getOrder(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        ApiResponse<CFOrder> localVarResp =
                getOrderWithHttpInfo(
                        xClientId,
                        xClientSecret,
                        orderId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId);
        return localVarResp.getData();
    }

    /**
     * Get Order Use this API to view all details of an order.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return ApiResponse&lt;CFOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<CFOrder> getOrderWithHttpInfo(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        okhttp3.Call localVarCall =
                getOrderValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        orderId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        null);
        Type localVarReturnType = new TypeToken<CFOrder>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order (asynchronously) Use this API to view all details of an order.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call getOrderAsync(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback<CFOrder> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getOrderValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        orderId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        _callback);
        Type localVarReturnType = new TypeToken<CFOrder>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderPay
     *
     * @param xApiVersion (required)
     * @param xRequestId (optional)
     * @param cfOrderPayRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call orderPayCall(
            String xApiVersion,
            String xRequestId,
            CFOrderPayRequest cfOrderPayRequest,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cfOrderPayRequest;

        // create path and map variables
        String localVarPath = "/orders/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestId != null) {
            localVarHeaderParams.put(
                    "x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderPayValidateBeforeCall(
            String xApiVersion,
            String xRequestId,
            CFOrderPayRequest cfOrderPayRequest,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xApiVersion' is set
        if (xApiVersion == null) {
            throw new ApiException(
                    "Missing the required parameter 'xApiVersion' when calling orderPay(Async)");
        }

        return orderPayCall(xApiVersion, xRequestId, cfOrderPayRequest, _callback);
    }

    /**
     * Order Pay Use this API when you have already created the orders and want Cashfree to process
     * the payment.
     *
     * @param xApiVersion (required)
     * @param xRequestId (optional)
     * @param cfOrderPayRequest (optional)
     * @return CFOrderPayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public CFOrderPayResponse orderPay(
            String xApiVersion, String xRequestId, CFOrderPayRequest cfOrderPayRequest)
            throws ApiException {
        ApiResponse<CFOrderPayResponse> localVarResp =
                orderPayWithHttpInfo(xApiVersion, xRequestId, cfOrderPayRequest);
        return localVarResp.getData();
    }

    /**
     * Order Pay Use this API when you have already created the orders and want Cashfree to process
     * the payment.
     *
     * @param xApiVersion (required)
     * @param xRequestId (optional)
     * @param cfOrderPayRequest (optional)
     * @return ApiResponse&lt;CFOrderPayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<CFOrderPayResponse> orderPayWithHttpInfo(
            String xApiVersion, String xRequestId, CFOrderPayRequest cfOrderPayRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                orderPayValidateBeforeCall(xApiVersion, xRequestId, cfOrderPayRequest, null);
        Type localVarReturnType = new TypeToken<CFOrderPayResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order Pay (asynchronously) Use this API when you have already created the orders and want
     * Cashfree to process the payment.
     *
     * @param xApiVersion (required)
     * @param xRequestId (optional)
     * @param cfOrderPayRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call orderPayAsync(
            String xApiVersion,
            String xRequestId,
            CFOrderPayRequest cfOrderPayRequest,
            final ApiCallback<CFOrderPayResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                orderPayValidateBeforeCall(xApiVersion, xRequestId, cfOrderPayRequest, _callback);
        Type localVarReturnType = new TypeToken<CFOrderPayResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preauthorization
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfAuthorizationRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call preauthorizationCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFAuthorizationRequest cfAuthorizationRequest,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cfAuthorizationRequest;

        // create path and map variables
        String localVarPath =
                "/orders/{order_id}/authorization"
                        .replace(
                                "{" + "order_id" + "}",
                                localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xIdempotencyReplayed != null) {
            localVarHeaderParams.put(
                    "x-idempotency-replayed",
                    localVarApiClient.parameterToString(xIdempotencyReplayed));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put(
                    "x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put(
                    "x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preauthorizationValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFAuthorizationRequest cfAuthorizationRequest,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling"
                            + " preauthorization(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling"
                            + " preauthorization(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'orderId' when calling"
                            + " preauthorization(Async)");
        }

        return preauthorizationCall(
                xClientId,
                xClientSecret,
                orderId,
                xApiVersion,
                xIdempotencyReplayed,
                xIdempotencyKey,
                xRequestId,
                cfAuthorizationRequest,
                _callback);
    }

    /**
     * Preauthorization Use this API to capture or void a preauthorized payment
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfAuthorizationRequest (optional)
     * @return CFPaymentsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public CFPaymentsEntity preauthorization(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFAuthorizationRequest cfAuthorizationRequest)
            throws ApiException {
        ApiResponse<CFPaymentsEntity> localVarResp =
                preauthorizationWithHttpInfo(
                        xClientId,
                        xClientSecret,
                        orderId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        cfAuthorizationRequest);
        return localVarResp.getData();
    }

    /**
     * Preauthorization Use this API to capture or void a preauthorized payment
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfAuthorizationRequest (optional)
     * @return ApiResponse&lt;CFPaymentsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<CFPaymentsEntity> preauthorizationWithHttpInfo(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFAuthorizationRequest cfAuthorizationRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                preauthorizationValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        orderId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        cfAuthorizationRequest,
                        null);
        Type localVarReturnType = new TypeToken<CFPaymentsEntity>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preauthorization (asynchronously) Use this API to capture or void a preauthorized payment
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfAuthorizationRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call preauthorizationAsync(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFAuthorizationRequest cfAuthorizationRequest,
            final ApiCallback<CFPaymentsEntity> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                preauthorizationValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        orderId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        cfAuthorizationRequest,
                        _callback);
        Type localVarReturnType = new TypeToken<CFPaymentsEntity>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
