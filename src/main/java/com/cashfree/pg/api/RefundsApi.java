/*
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cashfree.pg.api;


import com.cashfree.pg.ApiCallback;
import com.cashfree.pg.ApiClient;
import com.cashfree.pg.ApiException;
import com.cashfree.pg.ApiResponse;
import com.cashfree.pg.Configuration;
import com.cashfree.pg.Pair;
import com.cashfree.pg.model.CFRefund;
import com.cashfree.pg.model.CFRefundRequest;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RefundsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RefundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RefundsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createrefund
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfRefundRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Refund created </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call createrefundCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFRefundRequest cfRefundRequest,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cfRefundRequest;

        // create path and map variables
        String localVarPath =
                "/orders/{order_id}/refunds"
                        .replace(
                                "{" + "order_id" + "}",
                                localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xIdempotencyReplayed != null) {
            localVarHeaderParams.put(
                    "x-idempotency-replayed",
                    localVarApiClient.parameterToString(xIdempotencyReplayed));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put(
                    "x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put(
                    "x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createrefundValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFRefundRequest cfRefundRequest,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling createrefund(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling"
                            + " createrefund(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'orderId' when calling createrefund(Async)");
        }

        return createrefundCall(
                xClientId,
                xClientSecret,
                orderId,
                xApiVersion,
                xIdempotencyReplayed,
                xIdempotencyKey,
                xRequestId,
                cfRefundRequest,
                _callback);
    }

    /**
     * Create Refund Use this API to initiate refunds.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfRefundRequest (optional)
     * @return CFRefund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Refund created </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public CFRefund createrefund(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFRefundRequest cfRefundRequest)
            throws ApiException {
        ApiResponse<CFRefund> localVarResp =
                createrefundWithHttpInfo(
                        xClientId,
                        xClientSecret,
                        orderId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        cfRefundRequest);
        return localVarResp.getData();
    }

    /**
     * Create Refund Use this API to initiate refunds.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfRefundRequest (optional)
     * @return ApiResponse&lt;CFRefund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Refund created </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<CFRefund> createrefundWithHttpInfo(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFRefundRequest cfRefundRequest)
            throws ApiException {
        System.out.println("refund req" + cfRefundRequest);
        System.out.println("refund req" + orderId);
        okhttp3.Call localVarCall =
                createrefundValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        orderId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        cfRefundRequest,
                        null);
        Type localVarReturnType = new TypeToken<CFRefund>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Refund (asynchronously) Use this API to initiate refunds.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param cfRefundRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Refund created </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call createrefundAsync(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            CFRefundRequest cfRefundRequest,
            final ApiCallback<CFRefund> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createrefundValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        orderId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        cfRefundRequest,
                        _callback);
        Type localVarReturnType = new TypeToken<CFRefund>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRefund
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param refundId Refund Id of the refund you want to fetch. (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call getRefundCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String refundId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/orders/{order_id}/refunds/{refund_id}"
                        .replace(
                                "{" + "order_id" + "}",
                                localVarApiClient.escapeString(orderId.toString()))
                        .replace(
                                "{" + "refund_id" + "}",
                                localVarApiClient.escapeString(refundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xIdempotencyReplayed != null) {
            localVarHeaderParams.put(
                    "x-idempotency-replayed",
                    localVarApiClient.parameterToString(xIdempotencyReplayed));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put(
                    "x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put(
                    "x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRefundValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String refundId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling getRefund(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling getRefund(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'orderId' when calling getRefund(Async)");
        }

        // verify the required parameter 'refundId' is set
        if (refundId == null) {
            throw new ApiException(
                    "Missing the required parameter 'refundId' when calling getRefund(Async)");
        }

        return getRefundCall(
                xClientId,
                xClientSecret,
                orderId,
                refundId,
                xApiVersion,
                xIdempotencyReplayed,
                xIdempotencyKey,
                xRequestId,
                _callback);
    }

    /**
     * Get Refund Use this API to fetch a specific refund processed on your Cashfree Account.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param refundId Refund Id of the refund you want to fetch. (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return CFRefund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public CFRefund getRefund(
            String xClientId,
            String xClientSecret,
            String orderId,
            String refundId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        ApiResponse<CFRefund> localVarResp =
                getRefundWithHttpInfo(
                        xClientId,
                        xClientSecret,
                        orderId,
                        refundId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId);
        return localVarResp.getData();
    }

    /**
     * Get Refund Use this API to fetch a specific refund processed on your Cashfree Account.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param refundId Refund Id of the refund you want to fetch. (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return ApiResponse&lt;CFRefund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<CFRefund> getRefundWithHttpInfo(
            String xClientId,
            String xClientSecret,
            String orderId,
            String refundId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        okhttp3.Call localVarCall =
                getRefundValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        orderId,
                        refundId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        null);
        Type localVarReturnType = new TypeToken<CFRefund>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Refund (asynchronously) Use this API to fetch a specific refund processed on your
     * Cashfree Account.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param refundId Refund Id of the refund you want to fetch. (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call getRefundAsync(
            String xClientId,
            String xClientSecret,
            String orderId,
            String refundId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback<CFRefund> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getRefundValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        orderId,
                        refundId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        _callback);
        Type localVarReturnType = new TypeToken<CFRefund>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getallrefundsfororder
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call getallrefundsfororderCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/orders/{order_id}/refunds"
                        .replace(
                                "{" + "order_id" + "}",
                                localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getallrefundsfororderValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling"
                            + " getallrefundsfororder(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling"
                            + " getallrefundsfororder(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'orderId' when calling"
                            + " getallrefundsfororder(Async)");
        }

        return getallrefundsfororderCall(xClientId, xClientSecret, orderId, xApiVersion, _callback);
    }

    /**
     * Get All Refunds for an Order Use this API to fetch all refunds processed against an order.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @return List&lt;CFRefund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public List<CFRefund> getallrefundsfororder(
            String xClientId, String xClientSecret, String orderId, String xApiVersion)
            throws ApiException {
        ApiResponse<List<CFRefund>> localVarResp =
                getallrefundsfororderWithHttpInfo(xClientId, xClientSecret, orderId, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * Get All Refunds for an Order Use this API to fetch all refunds processed against an order.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @return ApiResponse&lt;List&lt;CFRefund&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<List<CFRefund>> getallrefundsfororderWithHttpInfo(
            String xClientId, String xClientSecret, String orderId, String xApiVersion)
            throws ApiException {
        okhttp3.Call localVarCall =
                getallrefundsfororderValidateBeforeCall(
                        xClientId, xClientSecret, orderId, xApiVersion, null);
        Type localVarReturnType = new TypeToken<List<CFRefund>>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Refunds for an Order (asynchronously) Use this API to fetch all refunds processed
     * against an order.
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param orderId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call getallrefundsfororderAsync(
            String xClientId,
            String xClientSecret,
            String orderId,
            String xApiVersion,
            final ApiCallback<List<CFRefund>> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getallrefundsfororderValidateBeforeCall(
                        xClientId, xClientSecret, orderId, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CFRefund>>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
