/*
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cashfree.pg.api;


import com.cashfree.pg.ApiCallback;
import com.cashfree.pg.ApiClient;
import com.cashfree.pg.ApiException;
import com.cashfree.pg.ApiResponse;
import com.cashfree.pg.Configuration;
import com.cashfree.pg.Pair;
import com.cashfree.pg.model.CFCryptogram;
import com.cashfree.pg.model.CFFetchAllSavedInstruments;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokenVaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokenVaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokenVaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteSpecificSavedInstrument
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteSpecificSavedInstrumentCall(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/customers/{customer_id}/instruments/{instrument_id}"
                        .replace(
                                "{" + "customer_id" + "}",
                                localVarApiClient.escapeString(customerId.toString()))
                        .replace(
                                "{" + "instrument_id" + "}",
                                localVarApiClient.escapeString(instrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificSavedInstrumentValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling"
                            + " deleteSpecificSavedInstrument(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling"
                            + " deleteSpecificSavedInstrument(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'customerId' when calling"
                            + " deleteSpecificSavedInstrument(Async)");
        }

        // verify the required parameter 'instrumentId' is set
        if (instrumentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'instrumentId' when calling"
                            + " deleteSpecificSavedInstrument(Async)");
        }

        return deleteSpecificSavedInstrumentCall(
                xClientId, xClientSecret, customerId, instrumentId, xApiVersion, _callback);
    }

    /**
     * Delete Saved Instrument To delete a saved instrument for a customer id and instrument id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @return CFFetchAllSavedInstruments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public CFFetchAllSavedInstruments deleteSpecificSavedInstrument(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion)
            throws ApiException {
        ApiResponse<CFFetchAllSavedInstruments> localVarResp =
                deleteSpecificSavedInstrumentWithHttpInfo(
                        xClientId, xClientSecret, customerId, instrumentId, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete Saved Instrument To delete a saved instrument for a customer id and instrument id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @return ApiResponse&lt;CFFetchAllSavedInstruments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<CFFetchAllSavedInstruments> deleteSpecificSavedInstrumentWithHttpInfo(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion)
            throws ApiException {
        okhttp3.Call localVarCall =
                deleteSpecificSavedInstrumentValidateBeforeCall(
                        xClientId, xClientSecret, customerId, instrumentId, xApiVersion, null);
        Type localVarReturnType = new TypeToken<CFFetchAllSavedInstruments>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Saved Instrument (asynchronously) To delete a saved instrument for a customer id and
     * instrument id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteSpecificSavedInstrumentAsync(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            final ApiCallback<CFFetchAllSavedInstruments> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                deleteSpecificSavedInstrumentValidateBeforeCall(
                        xClientId, xClientSecret, customerId, instrumentId, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<CFFetchAllSavedInstruments>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchAllSavedInstruments
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentType (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call fetchAllSavedInstrumentsCall(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentType,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/customers/{customer_id}/instruments"
                        .replace(
                                "{" + "customer_id" + "}",
                                localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instrumentType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("instrument_type", instrumentType));
        }

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xIdempotencyReplayed != null) {
            localVarHeaderParams.put(
                    "x-idempotency-replayed",
                    localVarApiClient.parameterToString(xIdempotencyReplayed));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put(
                    "x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put(
                    "x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchAllSavedInstrumentsValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentType,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling"
                            + " fetchAllSavedInstruments(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling"
                            + " fetchAllSavedInstruments(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'customerId' when calling"
                            + " fetchAllSavedInstruments(Async)");
        }

        // verify the required parameter 'instrumentType' is set
        if (instrumentType == null) {
            throw new ApiException(
                    "Missing the required parameter 'instrumentType' when calling"
                            + " fetchAllSavedInstruments(Async)");
        }

        return fetchAllSavedInstrumentsCall(
                xClientId,
                xClientSecret,
                customerId,
                instrumentType,
                xApiVersion,
                xIdempotencyReplayed,
                xIdempotencyKey,
                xRequestId,
                _callback);
    }

    /**
     * Fetch All Saved Instruments To get all saved instruments for a customer id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentType (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return List&lt;CFFetchAllSavedInstruments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public List<CFFetchAllSavedInstruments> fetchAllSavedInstruments(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentType,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        ApiResponse<List<CFFetchAllSavedInstruments>> localVarResp =
                fetchAllSavedInstrumentsWithHttpInfo(
                        xClientId,
                        xClientSecret,
                        customerId,
                        instrumentType,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId);
        return localVarResp.getData();
    }

    /**
     * Fetch All Saved Instruments To get all saved instruments for a customer id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentType (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return ApiResponse&lt;List&lt;CFFetchAllSavedInstruments&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<List<CFFetchAllSavedInstruments>> fetchAllSavedInstrumentsWithHttpInfo(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentType,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        okhttp3.Call localVarCall =
                fetchAllSavedInstrumentsValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        customerId,
                        instrumentType,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        null);
        Type localVarReturnType = new TypeToken<List<CFFetchAllSavedInstruments>>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch All Saved Instruments (asynchronously) To get all saved instruments for a customer id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentType (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call fetchAllSavedInstrumentsAsync(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentType,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback<List<CFFetchAllSavedInstruments>> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                fetchAllSavedInstrumentsValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        customerId,
                        instrumentType,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        _callback);
        Type localVarReturnType = new TypeToken<List<CFFetchAllSavedInstruments>>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCryptogram
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call fetchCryptogramCall(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/customers/{customer_id}/instruments/{instrument_id}/cryptogram"
                        .replace(
                                "{" + "customer_id" + "}",
                                localVarApiClient.escapeString(customerId.toString()))
                        .replace(
                                "{" + "instrument_id" + "}",
                                localVarApiClient.escapeString(instrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xIdempotencyReplayed != null) {
            localVarHeaderParams.put(
                    "x-idempotency-replayed",
                    localVarApiClient.parameterToString(xIdempotencyReplayed));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put(
                    "x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put(
                    "x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCryptogramValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling"
                            + " fetchCryptogram(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling"
                            + " fetchCryptogram(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'customerId' when calling"
                            + " fetchCryptogram(Async)");
        }

        // verify the required parameter 'instrumentId' is set
        if (instrumentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'instrumentId' when calling"
                            + " fetchCryptogram(Async)");
        }

        return fetchCryptogramCall(
                xClientId,
                xClientSecret,
                customerId,
                instrumentId,
                xApiVersion,
                xIdempotencyReplayed,
                xIdempotencyKey,
                xRequestId,
                _callback);
    }

    /**
     * Fetch cryptogram for saved instrument To get the card network token, token expiry and
     * cryptogram for a saved instrument using instrument id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return CFCryptogram
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public CFCryptogram fetchCryptogram(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        ApiResponse<CFCryptogram> localVarResp =
                fetchCryptogramWithHttpInfo(
                        xClientId,
                        xClientSecret,
                        customerId,
                        instrumentId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId);
        return localVarResp.getData();
    }

    /**
     * Fetch cryptogram for saved instrument To get the card network token, token expiry and
     * cryptogram for a saved instrument using instrument id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return ApiResponse&lt;CFCryptogram&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<CFCryptogram> fetchCryptogramWithHttpInfo(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        okhttp3.Call localVarCall =
                fetchCryptogramValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        customerId,
                        instrumentId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        null);
        Type localVarReturnType = new TypeToken<CFCryptogram>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch cryptogram for saved instrument (asynchronously) To get the card network token, token
     * expiry and cryptogram for a saved instrument using instrument id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call fetchCryptogramAsync(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback<CFCryptogram> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                fetchCryptogramValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        customerId,
                        instrumentId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        _callback);
        Type localVarReturnType = new TypeToken<CFCryptogram>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSpecificSavedInstrument
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call fetchSpecificSavedInstrumentCall(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/customers/{customer_id}/instruments/{instrument_id}"
                        .replace(
                                "{" + "customer_id" + "}",
                                localVarApiClient.escapeString(customerId.toString()))
                        .replace(
                                "{" + "instrument_id" + "}",
                                localVarApiClient.escapeString(instrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xClientId != null) {
            localVarHeaderParams.put("x-client-id", localVarApiClient.parameterToString(xClientId));
        }

        if (xClientSecret != null) {
            localVarHeaderParams.put(
                    "x-client-secret", localVarApiClient.parameterToString(xClientSecret));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put(
                    "x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xIdempotencyReplayed != null) {
            localVarHeaderParams.put(
                    "x-idempotency-replayed",
                    localVarApiClient.parameterToString(xIdempotencyReplayed));
        }

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put(
                    "x-idempotency-key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        if (xRequestId != null) {
            localVarHeaderParams.put(
                    "x-request-id", localVarApiClient.parameterToString(xRequestId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSpecificSavedInstrumentValidateBeforeCall(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'xClientId' is set
        if (xClientId == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientId' when calling"
                            + " fetchSpecificSavedInstrument(Async)");
        }

        // verify the required parameter 'xClientSecret' is set
        if (xClientSecret == null) {
            throw new ApiException(
                    "Missing the required parameter 'xClientSecret' when calling"
                            + " fetchSpecificSavedInstrument(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'customerId' when calling"
                            + " fetchSpecificSavedInstrument(Async)");
        }

        // verify the required parameter 'instrumentId' is set
        if (instrumentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'instrumentId' when calling"
                            + " fetchSpecificSavedInstrument(Async)");
        }

        return fetchSpecificSavedInstrumentCall(
                xClientId,
                xClientSecret,
                customerId,
                instrumentId,
                xApiVersion,
                xIdempotencyReplayed,
                xIdempotencyKey,
                xRequestId,
                _callback);
    }

    /**
     * Fetch Single Saved Instrument To get specific saved instrument for a customer id and
     * instrument id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return CFFetchAllSavedInstruments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public CFFetchAllSavedInstruments fetchSpecificSavedInstrument(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        ApiResponse<CFFetchAllSavedInstruments> localVarResp =
                fetchSpecificSavedInstrumentWithHttpInfo(
                        xClientId,
                        xClientSecret,
                        customerId,
                        instrumentId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId);
        return localVarResp.getData();
    }

    /**
     * Fetch Single Saved Instrument To get specific saved instrument for a customer id and
     * instrument id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @return ApiResponse&lt;CFFetchAllSavedInstruments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public ApiResponse<CFFetchAllSavedInstruments> fetchSpecificSavedInstrumentWithHttpInfo(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId)
            throws ApiException {
        okhttp3.Call localVarCall =
                fetchSpecificSavedInstrumentValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        customerId,
                        instrumentId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        null);
        Type localVarReturnType = new TypeToken<CFFetchAllSavedInstruments>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch Single Saved Instrument (asynchronously) To get specific saved instrument for a
     * customer id and instrument id
     *
     * @param xClientId (required)
     * @param xClientSecret (required)
     * @param customerId (required)
     * @param instrumentId (required)
     * @param xApiVersion (optional, default to 2022-01-01)
     * @param xIdempotencyReplayed (optional, default to false)
     * @param xIdempotencyKey (optional)
     * @param xRequestId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * <tr><td> 0 </td><td> Any bad or invalid request will lead to following error object </td><td>  * x-api-version -  <br>  * x-ratelimit-limit -  <br>  * x-ratelimit-remaining -  <br>  * x-ratelimit-retry -  <br>  * x-ratelimit-type -  <br>  * x-request-id -  <br>  </td></tr>
     * </table>
     */
    public okhttp3.Call fetchSpecificSavedInstrumentAsync(
            String xClientId,
            String xClientSecret,
            String customerId,
            String instrumentId,
            String xApiVersion,
            Boolean xIdempotencyReplayed,
            String xIdempotencyKey,
            String xRequestId,
            final ApiCallback<CFFetchAllSavedInstruments> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                fetchSpecificSavedInstrumentValidateBeforeCall(
                        xClientId,
                        xClientSecret,
                        customerId,
                        instrumentId,
                        xApiVersion,
                        xIdempotencyReplayed,
                        xIdempotencyKey,
                        xRequestId,
                        _callback);
        Type localVarReturnType = new TypeToken<CFFetchAllSavedInstruments>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
