/*
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cashfree.pg.model;


import com.cashfree.pg.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** CFLinkMetaEntity */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2023-03-16T14:01:52.135917+05:30[Asia/Kolkata]")
public class CFLinkMetaEntity {
    public static final String SERIALIZED_NAME_NOTIFY_URL = "notify_url";

    @SerializedName(SERIALIZED_NAME_NOTIFY_URL)
    private String notifyUrl;

    public static final String SERIALIZED_NAME_UPI_INTENT = "upi_intent";

    @SerializedName(SERIALIZED_NAME_UPI_INTENT)
    private Boolean upiIntent;

    public static final String SERIALIZED_NAME_RETURN_URL = "return_url";

    @SerializedName(SERIALIZED_NAME_RETURN_URL)
    private String returnUrl;

    public static final String SERIALIZED_NAME_PAYMENT_METHODS = "payment_methods";

    @SerializedName(SERIALIZED_NAME_PAYMENT_METHODS)
    private String paymentMethods;

    public CFLinkMetaEntity() {}

    public CFLinkMetaEntity notifyUrl(String notifyUrl) {

        this.notifyUrl = notifyUrl;
        return this;
    }

    /**
     * Notification URL for server-server communication. It should be an https URL.
     *
     * @return notifyUrl
     */
    @javax.annotation.Nullable
    public String getNotifyUrl() {
        return notifyUrl;
    }

    public void setNotifyUrl(String notifyUrl) {
        this.notifyUrl = notifyUrl;
    }

    public CFLinkMetaEntity upiIntent(Boolean upiIntent) {

        this.upiIntent = upiIntent;
        return this;
    }

    /**
     * If \&quot;true\&quot;, link will directly open UPI Intent flow on mobile, and normal link
     * flow elsewhere
     *
     * @return upiIntent
     */
    @javax.annotation.Nullable
    public Boolean getUpiIntent() {
        return upiIntent;
    }

    public void setUpiIntent(Boolean upiIntent) {
        this.upiIntent = upiIntent;
    }

    public CFLinkMetaEntity returnUrl(String returnUrl) {

        this.returnUrl = returnUrl;
        return this;
    }

    /**
     * The URL to which user will be redirected to after the payment is done on the link. Maximum
     * length: 250.
     *
     * @return returnUrl
     */
    @javax.annotation.Nullable
    public String getReturnUrl() {
        return returnUrl;
    }

    public void setReturnUrl(String returnUrl) {
        this.returnUrl = returnUrl;
    }

    public CFLinkMetaEntity paymentMethods(String paymentMethods) {

        this.paymentMethods = paymentMethods;
        return this;
    }

    /**
     * Allowed payment modes for this link. Pass comma-separated values among following options -
     * \&quot;cc\&quot;, \&quot;dc\&quot;, \&quot;ccc\&quot;, \&quot;ppc\&quot;, \&quot;nb\&quot;,
     * \&quot;upi\&quot;, \&quot;paypal\&quot;, \&quot;app\&quot;. Leave it blank to show all
     * available payment methods
     *
     * @return paymentMethods
     */
    @javax.annotation.Nullable
    public String getPaymentMethods() {
        return paymentMethods;
    }

    public void setPaymentMethods(String paymentMethods) {
        this.paymentMethods = paymentMethods;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CFLinkMetaEntity cfLinkMetaEntity = (CFLinkMetaEntity) o;
        return Objects.equals(this.notifyUrl, cfLinkMetaEntity.notifyUrl)
                && Objects.equals(this.upiIntent, cfLinkMetaEntity.upiIntent)
                && Objects.equals(this.returnUrl, cfLinkMetaEntity.returnUrl)
                && Objects.equals(this.paymentMethods, cfLinkMetaEntity.paymentMethods);
    }

    @Override
    public int hashCode() {
        return Objects.hash(notifyUrl, upiIntent, returnUrl, paymentMethods);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CFLinkMetaEntity {\n");
        sb.append("    notifyUrl: ").append(toIndentedString(notifyUrl)).append("\n");
        sb.append("    upiIntent: ").append(toIndentedString(upiIntent)).append("\n");
        sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
        sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("notify_url");
        openapiFields.add("upi_intent");
        openapiFields.add("return_url");
        openapiFields.add("payment_methods");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CFLinkMetaEntity
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CFLinkMetaEntity.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CFLinkMetaEntity is not found in the"
                                        + " empty JSON string",
                                CFLinkMetaEntity.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CFLinkMetaEntity.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CFLinkMetaEntity` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("notify_url") != null && !jsonObj.get("notify_url").isJsonNull())
                && !jsonObj.get("notify_url").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `notify_url` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("notify_url").toString()));
        }
        if ((jsonObj.get("return_url") != null && !jsonObj.get("return_url").isJsonNull())
                && !jsonObj.get("return_url").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `return_url` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("return_url").toString()));
        }
        if ((jsonObj.get("payment_methods") != null && !jsonObj.get("payment_methods").isJsonNull())
                && !jsonObj.get("payment_methods").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `payment_methods` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("payment_methods").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CFLinkMetaEntity.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CFLinkMetaEntity' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CFLinkMetaEntity> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CFLinkMetaEntity.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CFLinkMetaEntity>() {
                        @Override
                        public void write(JsonWriter out, CFLinkMetaEntity value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CFLinkMetaEntity read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CFLinkMetaEntity given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CFLinkMetaEntity
     * @throws IOException if the JSON string is invalid with respect to CFLinkMetaEntity
     */
    public static CFLinkMetaEntity fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CFLinkMetaEntity.class);
    }

    /**
     * Convert an instance of CFLinkMetaEntity to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
