/*
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cashfree.pg.model;


import com.cashfree.pg.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** CFPaymentsEntityCard */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2023-03-16T14:01:52.135917+05:30[Asia/Kolkata]")
public class CFPaymentsEntityCard {
    public static final String SERIALIZED_NAME_CHANNEL = "channel";

    @SerializedName(SERIALIZED_NAME_CHANNEL)
    private String channel;

    public static final String SERIALIZED_NAME_CARD_NUMBER = "card_number";

    @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
    private String cardNumber;

    public static final String SERIALIZED_NAME_CARD_NETWORK = "card_network";

    @SerializedName(SERIALIZED_NAME_CARD_NETWORK)
    private String cardNetwork;

    public static final String SERIALIZED_NAME_CARD_TYPE = "card_type";

    @SerializedName(SERIALIZED_NAME_CARD_TYPE)
    private String cardType;

    public static final String SERIALIZED_NAME_CARD_COUNTRY = "card_country";

    @SerializedName(SERIALIZED_NAME_CARD_COUNTRY)
    private String cardCountry;

    public static final String SERIALIZED_NAME_CARD_BANK_NAME = "card_bank_name";

    @SerializedName(SERIALIZED_NAME_CARD_BANK_NAME)
    private String cardBankName;

    public CFPaymentsEntityCard() {}

    public CFPaymentsEntityCard channel(String channel) {

        this.channel = channel;
        return this;
    }

    /**
     * Get channel
     *
     * @return channel
     */
    @javax.annotation.Nullable
    public String getChannel() {
        return channel;
    }

    public void setChannel(String channel) {
        this.channel = channel;
    }

    public CFPaymentsEntityCard cardNumber(String cardNumber) {

        this.cardNumber = cardNumber;
        return this;
    }

    /**
     * Get cardNumber
     *
     * @return cardNumber
     */
    @javax.annotation.Nullable
    public String getCardNumber() {
        return cardNumber;
    }

    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    public CFPaymentsEntityCard cardNetwork(String cardNetwork) {

        this.cardNetwork = cardNetwork;
        return this;
    }

    /**
     * Get cardNetwork
     *
     * @return cardNetwork
     */
    @javax.annotation.Nullable
    public String getCardNetwork() {
        return cardNetwork;
    }

    public void setCardNetwork(String cardNetwork) {
        this.cardNetwork = cardNetwork;
    }

    public CFPaymentsEntityCard cardType(String cardType) {

        this.cardType = cardType;
        return this;
    }

    /**
     * Get cardType
     *
     * @return cardType
     */
    @javax.annotation.Nullable
    public String getCardType() {
        return cardType;
    }

    public void setCardType(String cardType) {
        this.cardType = cardType;
    }

    public CFPaymentsEntityCard cardCountry(String cardCountry) {

        this.cardCountry = cardCountry;
        return this;
    }

    /**
     * Get cardCountry
     *
     * @return cardCountry
     */
    @javax.annotation.Nullable
    public String getCardCountry() {
        return cardCountry;
    }

    public void setCardCountry(String cardCountry) {
        this.cardCountry = cardCountry;
    }

    public CFPaymentsEntityCard cardBankName(String cardBankName) {

        this.cardBankName = cardBankName;
        return this;
    }

    /**
     * Get cardBankName
     *
     * @return cardBankName
     */
    @javax.annotation.Nullable
    public String getCardBankName() {
        return cardBankName;
    }

    public void setCardBankName(String cardBankName) {
        this.cardBankName = cardBankName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CFPaymentsEntityCard cfPaymentsEntityCard = (CFPaymentsEntityCard) o;
        return Objects.equals(this.channel, cfPaymentsEntityCard.channel)
                && Objects.equals(this.cardNumber, cfPaymentsEntityCard.cardNumber)
                && Objects.equals(this.cardNetwork, cfPaymentsEntityCard.cardNetwork)
                && Objects.equals(this.cardType, cfPaymentsEntityCard.cardType)
                && Objects.equals(this.cardCountry, cfPaymentsEntityCard.cardCountry)
                && Objects.equals(this.cardBankName, cfPaymentsEntityCard.cardBankName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(channel, cardNumber, cardNetwork, cardType, cardCountry, cardBankName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CFPaymentsEntityCard {\n");
        sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
        sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
        sb.append("    cardNetwork: ").append(toIndentedString(cardNetwork)).append("\n");
        sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
        sb.append("    cardCountry: ").append(toIndentedString(cardCountry)).append("\n");
        sb.append("    cardBankName: ").append(toIndentedString(cardBankName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("channel");
        openapiFields.add("card_number");
        openapiFields.add("card_network");
        openapiFields.add("card_type");
        openapiFields.add("card_country");
        openapiFields.add("card_bank_name");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CFPaymentsEntityCard
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CFPaymentsEntityCard.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CFPaymentsEntityCard is not found in"
                                        + " the empty JSON string",
                                CFPaymentsEntityCard.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CFPaymentsEntityCard.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CFPaymentsEntityCard` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull())
                && !jsonObj.get("channel").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `channel` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("channel").toString()));
        }
        if ((jsonObj.get("card_number") != null && !jsonObj.get("card_number").isJsonNull())
                && !jsonObj.get("card_number").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `card_number` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("card_number").toString()));
        }
        if ((jsonObj.get("card_network") != null && !jsonObj.get("card_network").isJsonNull())
                && !jsonObj.get("card_network").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `card_network` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("card_network").toString()));
        }
        if ((jsonObj.get("card_type") != null && !jsonObj.get("card_type").isJsonNull())
                && !jsonObj.get("card_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `card_type` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("card_type").toString()));
        }
        if ((jsonObj.get("card_country") != null && !jsonObj.get("card_country").isJsonNull())
                && !jsonObj.get("card_country").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `card_country` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("card_country").toString()));
        }
        if ((jsonObj.get("card_bank_name") != null && !jsonObj.get("card_bank_name").isJsonNull())
                && !jsonObj.get("card_bank_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `card_bank_name` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("card_bank_name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CFPaymentsEntityCard.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CFPaymentsEntityCard' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CFPaymentsEntityCard> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CFPaymentsEntityCard.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CFPaymentsEntityCard>() {
                        @Override
                        public void write(JsonWriter out, CFPaymentsEntityCard value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CFPaymentsEntityCard read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CFPaymentsEntityCard given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CFPaymentsEntityCard
     * @throws IOException if the JSON string is invalid with respect to CFPaymentsEntityCard
     */
    public static CFPaymentsEntityCard fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CFPaymentsEntityCard.class);
    }

    /**
     * Convert an instance of CFPaymentsEntityCard to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
