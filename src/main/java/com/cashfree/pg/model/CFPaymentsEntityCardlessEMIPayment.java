/*
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cashfree.pg.model;


import com.cashfree.pg.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** CFPaymentsEntityCardlessEMIPayment */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2023-03-16T14:01:52.135917+05:30[Asia/Kolkata]")
public class CFPaymentsEntityCardlessEMIPayment {
    public static final String SERIALIZED_NAME_CARDLESS_EMI = "cardless_emi";

    @SerializedName(SERIALIZED_NAME_CARDLESS_EMI)
    private CFCardlessEMI cardlessEmi;

    public CFPaymentsEntityCardlessEMIPayment() {}

    public CFPaymentsEntityCardlessEMIPayment cardlessEmi(CFCardlessEMI cardlessEmi) {

        this.cardlessEmi = cardlessEmi;
        return this;
    }

    /**
     * Get cardlessEmi
     *
     * @return cardlessEmi
     */
    @javax.annotation.Nullable
    public CFCardlessEMI getCardlessEmi() {
        return cardlessEmi;
    }

    public void setCardlessEmi(CFCardlessEMI cardlessEmi) {
        this.cardlessEmi = cardlessEmi;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CFPaymentsEntityCardlessEMIPayment cfPaymentsEntityCardlessEMIPayment =
                (CFPaymentsEntityCardlessEMIPayment) o;
        return Objects.equals(this.cardlessEmi, cfPaymentsEntityCardlessEMIPayment.cardlessEmi);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cardlessEmi);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CFPaymentsEntityCardlessEMIPayment {\n");
        sb.append("    cardlessEmi: ").append(toIndentedString(cardlessEmi)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("cardless_emi");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     CFPaymentsEntityCardlessEMIPayment
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CFPaymentsEntityCardlessEMIPayment.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CFPaymentsEntityCardlessEMIPayment is"
                                        + " not found in the empty JSON string",
                                CFPaymentsEntityCardlessEMIPayment.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CFPaymentsEntityCardlessEMIPayment.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `CFPaymentsEntityCardlessEMIPayment` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        // validate the optional field `cardless_emi`
        if (jsonObj.get("cardless_emi") != null && !jsonObj.get("cardless_emi").isJsonNull()) {
            CFCardlessEMI.validateJsonObject(jsonObj.getAsJsonObject("cardless_emi"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CFPaymentsEntityCardlessEMIPayment.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CFPaymentsEntityCardlessEMIPayment' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CFPaymentsEntityCardlessEMIPayment> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(CFPaymentsEntityCardlessEMIPayment.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CFPaymentsEntityCardlessEMIPayment>() {
                        @Override
                        public void write(JsonWriter out, CFPaymentsEntityCardlessEMIPayment value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CFPaymentsEntityCardlessEMIPayment read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CFPaymentsEntityCardlessEMIPayment given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CFPaymentsEntityCardlessEMIPayment
     * @throws IOException if the JSON string is invalid with respect to
     *     CFPaymentsEntityCardlessEMIPayment
     */
    public static CFPaymentsEntityCardlessEMIPayment fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, CFPaymentsEntityCardlessEMIPayment.class);
    }

    /**
     * Convert an instance of CFPaymentsEntityCardlessEMIPayment to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
