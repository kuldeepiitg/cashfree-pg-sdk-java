/*
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cashfree.pg.model;


import com.cashfree.pg.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** CFSettlementsEntity */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2023-03-16T14:01:52.135917+05:30[Asia/Kolkata]")
public class CFSettlementsEntity {
    public static final String SERIALIZED_NAME_CF_PAYMENT_ID = "cf_payment_id";

    @SerializedName(SERIALIZED_NAME_CF_PAYMENT_ID)
    private String cfPaymentId;

    public static final String SERIALIZED_NAME_CF_SETTLEMENT_ID = "cf_settlement_id";

    @SerializedName(SERIALIZED_NAME_CF_SETTLEMENT_ID)
    private String cfSettlementId;

    public static final String SERIALIZED_NAME_SETTLEMENT_CURRENCY = "settlement_currency";

    @SerializedName(SERIALIZED_NAME_SETTLEMENT_CURRENCY)
    private String settlementCurrency;

    public static final String SERIALIZED_NAME_ORDER_ID = "order_id";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    private String orderId;

    public static final String SERIALIZED_NAME_ENTITY = "entity";

    @SerializedName(SERIALIZED_NAME_ENTITY)
    private String entity;

    public static final String SERIALIZED_NAME_ORDER_AMOUNT = "order_amount";

    @SerializedName(SERIALIZED_NAME_ORDER_AMOUNT)
    private BigDecimal orderAmount;

    public static final String SERIALIZED_NAME_PAYMENT_TIME = "payment_time";

    @SerializedName(SERIALIZED_NAME_PAYMENT_TIME)
    private String paymentTime;

    public static final String SERIALIZED_NAME_SERVICE_CHARGE = "service_charge";

    @SerializedName(SERIALIZED_NAME_SERVICE_CHARGE)
    private BigDecimal serviceCharge;

    public static final String SERIALIZED_NAME_SERVICE_TAX = "service_tax";

    @SerializedName(SERIALIZED_NAME_SERVICE_TAX)
    private BigDecimal serviceTax;

    public static final String SERIALIZED_NAME_SETTLEMENT_AMOUNT = "settlement_amount";

    @SerializedName(SERIALIZED_NAME_SETTLEMENT_AMOUNT)
    private BigDecimal settlementAmount;

    public static final String SERIALIZED_NAME_SETTLEMENT_ID = "settlement_id";

    @SerializedName(SERIALIZED_NAME_SETTLEMENT_ID)
    private Integer settlementId;

    public static final String SERIALIZED_NAME_TRANSFER_ID = "transfer_id";

    @SerializedName(SERIALIZED_NAME_TRANSFER_ID)
    private Integer transferId;

    public static final String SERIALIZED_NAME_TRANSFER_TIME = "transfer_time";

    @SerializedName(SERIALIZED_NAME_TRANSFER_TIME)
    private String transferTime;

    public static final String SERIALIZED_NAME_TRANSFER_UTR = "transfer_utr";

    @SerializedName(SERIALIZED_NAME_TRANSFER_UTR)
    private String transferUtr;

    public CFSettlementsEntity() {}

    public CFSettlementsEntity cfPaymentId(String cfPaymentId) {

        this.cfPaymentId = cfPaymentId;
        return this;
    }

    /**
     * Get cfPaymentId
     *
     * @return cfPaymentId
     */
    @javax.annotation.Nullable
    public String getCfPaymentId() {
        return cfPaymentId;
    }

    public void setCfPaymentId(String cfPaymentId) {
        this.cfPaymentId = cfPaymentId;
    }

    public CFSettlementsEntity cfSettlementId(String cfSettlementId) {

        this.cfSettlementId = cfSettlementId;
        return this;
    }

    /**
     * Get cfSettlementId
     *
     * @return cfSettlementId
     */
    @javax.annotation.Nullable
    public String getCfSettlementId() {
        return cfSettlementId;
    }

    public void setCfSettlementId(String cfSettlementId) {
        this.cfSettlementId = cfSettlementId;
    }

    public CFSettlementsEntity settlementCurrency(String settlementCurrency) {

        this.settlementCurrency = settlementCurrency;
        return this;
    }

    /**
     * Get settlementCurrency
     *
     * @return settlementCurrency
     */
    @javax.annotation.Nullable
    public String getSettlementCurrency() {
        return settlementCurrency;
    }

    public void setSettlementCurrency(String settlementCurrency) {
        this.settlementCurrency = settlementCurrency;
    }

    public CFSettlementsEntity orderId(String orderId) {

        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @javax.annotation.Nullable
    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public CFSettlementsEntity entity(String entity) {

        this.entity = entity;
        return this;
    }

    /**
     * Get entity
     *
     * @return entity
     */
    @javax.annotation.Nullable
    public String getEntity() {
        return entity;
    }

    public void setEntity(String entity) {
        this.entity = entity;
    }

    public CFSettlementsEntity orderAmount(BigDecimal orderAmount) {

        this.orderAmount = orderAmount;
        return this;
    }

    /**
     * Get orderAmount
     *
     * @return orderAmount
     */
    @javax.annotation.Nullable
    public BigDecimal getOrderAmount() {
        return orderAmount;
    }

    public void setOrderAmount(BigDecimal orderAmount) {
        this.orderAmount = orderAmount;
    }

    public CFSettlementsEntity paymentTime(String paymentTime) {

        this.paymentTime = paymentTime;
        return this;
    }

    /**
     * Get paymentTime
     *
     * @return paymentTime
     */
    @javax.annotation.Nullable
    public String getPaymentTime() {
        return paymentTime;
    }

    public void setPaymentTime(String paymentTime) {
        this.paymentTime = paymentTime;
    }

    public CFSettlementsEntity serviceCharge(BigDecimal serviceCharge) {

        this.serviceCharge = serviceCharge;
        return this;
    }

    /**
     * Get serviceCharge
     *
     * @return serviceCharge
     */
    @javax.annotation.Nullable
    public BigDecimal getServiceCharge() {
        return serviceCharge;
    }

    public void setServiceCharge(BigDecimal serviceCharge) {
        this.serviceCharge = serviceCharge;
    }

    public CFSettlementsEntity serviceTax(BigDecimal serviceTax) {

        this.serviceTax = serviceTax;
        return this;
    }

    /**
     * Get serviceTax
     *
     * @return serviceTax
     */
    @javax.annotation.Nullable
    public BigDecimal getServiceTax() {
        return serviceTax;
    }

    public void setServiceTax(BigDecimal serviceTax) {
        this.serviceTax = serviceTax;
    }

    public CFSettlementsEntity settlementAmount(BigDecimal settlementAmount) {

        this.settlementAmount = settlementAmount;
        return this;
    }

    /**
     * Get settlementAmount
     *
     * @return settlementAmount
     */
    @javax.annotation.Nullable
    public BigDecimal getSettlementAmount() {
        return settlementAmount;
    }

    public void setSettlementAmount(BigDecimal settlementAmount) {
        this.settlementAmount = settlementAmount;
    }

    public CFSettlementsEntity settlementId(Integer settlementId) {

        this.settlementId = settlementId;
        return this;
    }

    /**
     * Get settlementId
     *
     * @return settlementId
     */
    @javax.annotation.Nullable
    public Integer getSettlementId() {
        return settlementId;
    }

    public void setSettlementId(Integer settlementId) {
        this.settlementId = settlementId;
    }

    public CFSettlementsEntity transferId(Integer transferId) {

        this.transferId = transferId;
        return this;
    }

    /**
     * Get transferId
     *
     * @return transferId
     */
    @javax.annotation.Nullable
    public Integer getTransferId() {
        return transferId;
    }

    public void setTransferId(Integer transferId) {
        this.transferId = transferId;
    }

    public CFSettlementsEntity transferTime(String transferTime) {

        this.transferTime = transferTime;
        return this;
    }

    /**
     * Get transferTime
     *
     * @return transferTime
     */
    @javax.annotation.Nullable
    public String getTransferTime() {
        return transferTime;
    }

    public void setTransferTime(String transferTime) {
        this.transferTime = transferTime;
    }

    public CFSettlementsEntity transferUtr(String transferUtr) {

        this.transferUtr = transferUtr;
        return this;
    }

    /**
     * Get transferUtr
     *
     * @return transferUtr
     */
    @javax.annotation.Nullable
    public String getTransferUtr() {
        return transferUtr;
    }

    public void setTransferUtr(String transferUtr) {
        this.transferUtr = transferUtr;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CFSettlementsEntity cfSettlementsEntity = (CFSettlementsEntity) o;
        return Objects.equals(this.cfPaymentId, cfSettlementsEntity.cfPaymentId)
                && Objects.equals(this.cfSettlementId, cfSettlementsEntity.cfSettlementId)
                && Objects.equals(this.settlementCurrency, cfSettlementsEntity.settlementCurrency)
                && Objects.equals(this.orderId, cfSettlementsEntity.orderId)
                && Objects.equals(this.entity, cfSettlementsEntity.entity)
                && Objects.equals(this.orderAmount, cfSettlementsEntity.orderAmount)
                && Objects.equals(this.paymentTime, cfSettlementsEntity.paymentTime)
                && Objects.equals(this.serviceCharge, cfSettlementsEntity.serviceCharge)
                && Objects.equals(this.serviceTax, cfSettlementsEntity.serviceTax)
                && Objects.equals(this.settlementAmount, cfSettlementsEntity.settlementAmount)
                && Objects.equals(this.settlementId, cfSettlementsEntity.settlementId)
                && Objects.equals(this.transferId, cfSettlementsEntity.transferId)
                && Objects.equals(this.transferTime, cfSettlementsEntity.transferTime)
                && Objects.equals(this.transferUtr, cfSettlementsEntity.transferUtr);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                cfPaymentId,
                cfSettlementId,
                settlementCurrency,
                orderId,
                entity,
                orderAmount,
                paymentTime,
                serviceCharge,
                serviceTax,
                settlementAmount,
                settlementId,
                transferId,
                transferTime,
                transferUtr);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CFSettlementsEntity {\n");
        sb.append("    cfPaymentId: ").append(toIndentedString(cfPaymentId)).append("\n");
        sb.append("    cfSettlementId: ").append(toIndentedString(cfSettlementId)).append("\n");
        sb.append("    settlementCurrency: ")
                .append(toIndentedString(settlementCurrency))
                .append("\n");
        sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
        sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
        sb.append("    paymentTime: ").append(toIndentedString(paymentTime)).append("\n");
        sb.append("    serviceCharge: ").append(toIndentedString(serviceCharge)).append("\n");
        sb.append("    serviceTax: ").append(toIndentedString(serviceTax)).append("\n");
        sb.append("    settlementAmount: ").append(toIndentedString(settlementAmount)).append("\n");
        sb.append("    settlementId: ").append(toIndentedString(settlementId)).append("\n");
        sb.append("    transferId: ").append(toIndentedString(transferId)).append("\n");
        sb.append("    transferTime: ").append(toIndentedString(transferTime)).append("\n");
        sb.append("    transferUtr: ").append(toIndentedString(transferUtr)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("cf_payment_id");
        openapiFields.add("cf_settlement_id");
        openapiFields.add("settlement_currency");
        openapiFields.add("order_id");
        openapiFields.add("entity");
        openapiFields.add("order_amount");
        openapiFields.add("payment_time");
        openapiFields.add("service_charge");
        openapiFields.add("service_tax");
        openapiFields.add("settlement_amount");
        openapiFields.add("settlement_id");
        openapiFields.add("transfer_id");
        openapiFields.add("transfer_time");
        openapiFields.add("transfer_utr");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CFSettlementsEntity
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CFSettlementsEntity.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CFSettlementsEntity is not found in"
                                        + " the empty JSON string",
                                CFSettlementsEntity.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CFSettlementsEntity.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CFSettlementsEntity` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("cf_payment_id") != null && !jsonObj.get("cf_payment_id").isJsonNull())
                && !jsonObj.get("cf_payment_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cf_payment_id` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("cf_payment_id").toString()));
        }
        if ((jsonObj.get("cf_settlement_id") != null
                        && !jsonObj.get("cf_settlement_id").isJsonNull())
                && !jsonObj.get("cf_settlement_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cf_settlement_id` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("cf_settlement_id").toString()));
        }
        if ((jsonObj.get("settlement_currency") != null
                        && !jsonObj.get("settlement_currency").isJsonNull())
                && !jsonObj.get("settlement_currency").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `settlement_currency` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("settlement_currency").toString()));
        }
        if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull())
                && !jsonObj.get("order_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `order_id` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("order_id").toString()));
        }
        if ((jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull())
                && !jsonObj.get("entity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `entity` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("entity").toString()));
        }
        if ((jsonObj.get("payment_time") != null && !jsonObj.get("payment_time").isJsonNull())
                && !jsonObj.get("payment_time").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `payment_time` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("payment_time").toString()));
        }
        if ((jsonObj.get("transfer_time") != null && !jsonObj.get("transfer_time").isJsonNull())
                && !jsonObj.get("transfer_time").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `transfer_time` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("transfer_time").toString()));
        }
        if ((jsonObj.get("transfer_utr") != null && !jsonObj.get("transfer_utr").isJsonNull())
                && !jsonObj.get("transfer_utr").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `transfer_utr` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("transfer_utr").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CFSettlementsEntity.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CFSettlementsEntity' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CFSettlementsEntity> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CFSettlementsEntity.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CFSettlementsEntity>() {
                        @Override
                        public void write(JsonWriter out, CFSettlementsEntity value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CFSettlementsEntity read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CFSettlementsEntity given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CFSettlementsEntity
     * @throws IOException if the JSON string is invalid with respect to CFSettlementsEntity
     */
    public static CFSettlementsEntity fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CFSettlementsEntity.class);
    }

    /**
     * Convert an instance of CFSettlementsEntity to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
