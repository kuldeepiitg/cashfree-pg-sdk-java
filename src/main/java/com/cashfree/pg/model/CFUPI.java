/*
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.cashfree.pg.model;


import com.cashfree.pg.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** CFUPI */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2023-03-16T14:01:52.135917+05:30[Asia/Kolkata]")
public class CFUPI {
    /**
     * Specify the channel through which the payment must be processed. Can be one of
     * [\&quot;link\&quot;, \&quot;collect\&quot;, \&quot;qrcode\&quot;]
     */
    @JsonAdapter(ChannelEnum.Adapter.class)
    public enum ChannelEnum {
        LINK("link"),

        COLLECT("collect"),

        QRCODE("qrcode");

        private String value;

        ChannelEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ChannelEnum fromValue(String value) {
            for (ChannelEnum b : ChannelEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<ChannelEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ChannelEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ChannelEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_CHANNEL = "channel";

    @SerializedName(SERIALIZED_NAME_CHANNEL)
    private ChannelEnum channel;

    public static final String SERIALIZED_NAME_UPI_ID = "upi_id";

    @SerializedName(SERIALIZED_NAME_UPI_ID)
    private String upiId;

    public static final String SERIALIZED_NAME_AUTHORIZE_ONLY = "authorize_only";

    @SerializedName(SERIALIZED_NAME_AUTHORIZE_ONLY)
    private Boolean authorizeOnly;

    public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";

    @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
    private CFUPIAuthorizeDetails authorization;

    public CFUPI() {}

    public CFUPI channel(ChannelEnum channel) {

        this.channel = channel;
        return this;
    }

    /**
     * Specify the channel through which the payment must be processed. Can be one of
     * [\&quot;link\&quot;, \&quot;collect\&quot;, \&quot;qrcode\&quot;]
     *
     * @return channel
     */
    @javax.annotation.Nonnull
    public ChannelEnum getChannel() {
        return channel;
    }

    public void setChannel(ChannelEnum channel) {
        this.channel = channel;
    }

    public CFUPI upiId(String upiId) {

        this.upiId = upiId;
        return this;
    }

    /**
     * Customer UPI VPA to process payment.
     *
     * @return upiId
     */
    @javax.annotation.Nonnull
    public String getUpiId() {
        return upiId;
    }

    public void setUpiId(String upiId) {
        this.upiId = upiId;
    }

    public CFUPI authorizeOnly(Boolean authorizeOnly) {

        this.authorizeOnly = authorizeOnly;
        return this;
    }

    /**
     * For one time mandate on UPI. Set this as authorize_only &#x3D; true. Please note that you can
     * only use the \&quot;collect\&quot; channel if you are sending a one time mandate request
     *
     * @return authorizeOnly
     */
    @javax.annotation.Nullable
    public Boolean getAuthorizeOnly() {
        return authorizeOnly;
    }

    public void setAuthorizeOnly(Boolean authorizeOnly) {
        this.authorizeOnly = authorizeOnly;
    }

    public CFUPI authorization(CFUPIAuthorizeDetails authorization) {

        this.authorization = authorization;
        return this;
    }

    /**
     * Get authorization
     *
     * @return authorization
     */
    @javax.annotation.Nullable
    public CFUPIAuthorizeDetails getAuthorization() {
        return authorization;
    }

    public void setAuthorization(CFUPIAuthorizeDetails authorization) {
        this.authorization = authorization;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CFUPI CFUPI = (CFUPI) o;
        return Objects.equals(this.channel, CFUPI.channel)
                && Objects.equals(this.upiId, CFUPI.upiId)
                && Objects.equals(this.authorizeOnly, CFUPI.authorizeOnly)
                && Objects.equals(this.authorization, CFUPI.authorization);
    }

    @Override
    public int hashCode() {
        return Objects.hash(channel, upiId, authorizeOnly, authorization);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CFUPI {\n");
        sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
        sb.append("    upiId: ").append(toIndentedString(upiId)).append("\n");
        sb.append("    authorizeOnly: ").append(toIndentedString(authorizeOnly)).append("\n");
        sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("channel");
        openapiFields.add("upi_id");
        openapiFields.add("authorize_only");
        openapiFields.add("authorization");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("channel");
        openapiRequiredFields.add("upi_id");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CFUPI
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CFUPI.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CFUPI is not found in the empty JSON"
                                        + " string",
                                CFUPI.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CFUPI.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CFUPI`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CFUPI.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("channel").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `channel` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("channel").toString()));
        }
        if (!jsonObj.get("upi_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `upi_id` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("upi_id").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CFUPI.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CFUPI' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CFUPI> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CFUPI.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CFUPI>() {
                        @Override
                        public void write(JsonWriter out, CFUPI value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CFUPI read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CFUPI given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CFUPI
     * @throws IOException if the JSON string is invalid with respect to CFUPI
     */
    public static CFUPI fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CFUPI.class);
    }

    /**
     * Convert an instance of CFUPI to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
